<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="DefaultIfEmptyAppliedAfterProjection" xml:space="preserve">
    <value>Cannot apply 'DefaultIfEmpty' after a client-evaluated projection. Consider applying 'DefaultIfEmpty' before last 'Select' or use 'AsEnumerable' before 'DefaultIfEmpty' to apply it on client-side.</value>
  </data>
  <data name="DistinctOnSubqueryNotSupported" xml:space="preserve">
    <value>Using 'Distinct' operation on a projection containing a subquery is not supported.</value>
  </data>
  <data name="InvalidDerivedTypeInEntityProjection" xml:space="preserve">
    <value>The specified entity type '{derivedType}' is not derived from '{entityType}'.</value>
  </data>
  <data name="InvalidFromSqlArguments" xml:space="preserve">
    <value>A FromSqlExpression has an invalid arguments expression type '{expressionType}' or value type '{valueType}'.</value>
  </data>
  <data name="InvalidResourceId" xml:space="preserve">
    <value>Unable to generate a valid 'id' value to execute a 'ReadItem' query. This usually happens when the value provided for one of the properties is 'null' or an empty string. Please supply a value that's not 'null' or an empty string.</value>
  </data>
  <data name="LogSavedChanges" xml:space="preserve">
    <value>Saved {count} entities to Kafka store.</value>
    <comment>Information KafkaEventId.ChangesSaved int</comment>
  </data>
  <data name="LogTransactionsNotSupported" xml:space="preserve">
    <value>Transactions are not supported by the Kafka store. See http://go.microsoft.com/fwlink/?LinkId=800142</value>
    <comment>Warning KafkaEventId.TransactionIgnoredWarning</comment>
  </data>
  <data name="MissingOrderingInSelectExpression" xml:space="preserve">
    <value>'Reverse' could not be translated to the server because there is no ordering on the server side.</value>
  </data>
  <data name="NavigationPropertyIsNotAnEmbeddedEntity" xml:space="preserve">
    <value>Navigation '{entityType}.{navigationName}' doesn't point to an embedded entity.</value>
  </data>
  <data name="NonEmbeddedIncludeNotSupported" xml:space="preserve">
    <value>Including navigation '{navigation}' is not supported as the navigation is not embedded in same resource.</value>
  </data>
  <data name="NoQueryStrings" xml:space="preserve">
    <value>There is no query string because the Kafka provider does not use a string-based query language.</value>
  </data>
  <data name="NoReadItemQueryString" xml:space="preserve">
    <value>There is no string-based representation of this query as it's executed using 'ReadItemQueryAsync({resourceId}, {partitionKey})'.</value>
  </data>
  <data name="NullabilityErrorException" xml:space="preserve">
    <value>Required properties '{requiredProperties}' are missing for the instance of entity type '{entityType}'. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see the entity key value.</value>
  </data>
  <data name="NullabilityErrorExceptionSensitive" xml:space="preserve">
    <value>Required properties '{requiredProperties}' are missing for the instance of entity type '{entityType}' with the key value '{keyValue}'.</value>
  </data>
  <data name="NullTypeMappingInSqlTree" xml:space="preserve">
    <value>The expression '{sqlExpression}' in the SQL tree does not have a type mapping assigned.</value>
  </data>
  <data name="OffsetRequiresLimit" xml:space="preserve">
    <value>Cosmos SQL does not allow Offset without Limit. Consider specifying a 'Take' operation on the query.</value>
  </data>
  <data name="PartitionKeyMismatch" xml:space="preserve">
    <value>The partition key specified in the 'WithPartitionKey' call '{partitionKey1}' and the partition key specified in the 'Where' predicate '{partitionKey2}' must be identical to return any results. Remove one of them.</value>
  </data>
  <data name="PartitionKeyMissing" xml:space="preserve">
    <value>Unable to execute a 'ReadItem' query since the partition key value is missing. Consider using the 'WithPartitionKey' method on the query to specify partition key to use.</value>
  </data>
  <data name="ResourceIdMissing" xml:space="preserve">
    <value>Unable to execute a 'ReadItem' query since the 'id' value is missing and cannot be generated.</value>
  </data>
  <data name="ReverseAfterSkipTakeNotSupported" xml:space="preserve">
    <value>Reversing the ordering is not supported when limit or offset are already applied.</value>
  </data>
  <data name="SetOperationsNotAllowedAfterClientEvaluation" xml:space="preserve">
    <value>Unable to translate set operation after client projection has been applied. Consider moving the set operation before the last 'Select' call.</value>
  </data>
  <data name="UnableToBindMemberToEntityProjection" xml:space="preserve">
    <value>Unable to bind '{memberType}' '{member}' to entity projection of '{entityType}'.</value>
  </data>
  <data name="UnsupportedOperatorForSqlExpression" xml:space="preserve">
    <value>Unsupported operator '{nodeType}' specified for expression of type '{expressionType}'.</value>
  </data>
  <data name="UpdateConcurrencyException" xml:space="preserve">
    <value>Attempted to update or delete an entity that does not exist in the store.</value>
  </data>
  <data name="UpdateConcurrencyTokenException" xml:space="preserve">
    <value>Conflicts were detected for instance of entity type '{entityType}' on the concurrency token properties {properties}. Consider using 'DbContextOptionsBuilder.EnableSensitiveDataLogging' to see the conflicting values.</value>
  </data>
  <data name="UpdateConcurrencyTokenExceptionSensitive" xml:space="preserve">
    <value>Conflicts were detected for instance of entity type '{entityType}' with the key value '{keyValue}' on the concurrency token property values {conflictingValues}, with corresponding database values {databaseValues}.</value>
  </data>
  <data name="VisitChildrenMustBeOverridden" xml:space="preserve">
    <value>'VisitChildren' must be overridden in the class deriving from 'SqlExpression'.</value>
  </data>
</root>